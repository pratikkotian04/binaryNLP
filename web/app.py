# import the Flask class from the flask module
from flask import Flask, render_template
import sqlite3
from pprint import pprint
from flask import jsonify
from flask import request
import sys

#Very Hacky stuff being done
#We should be using Ids in db and  the works but since this is one off code for cluster evaluation. Guess it doesnt hurt

# Static directory path
data_path = "/home/dvc2106/newsblaster_project/nb_migration/stream/"


def is_new_event(rows):

 new_rows = []

 for row in rows:
    curr_index = rows.index(row)
    if(curr_index-1 != 0):
        pre_index =  curr_index - 1

        pre_item = rows[pre_index] 
        eventid = pre_item[1]
        category = pre_item[2]
        location = pre_item[4]
        date = pre_item[5]

        if(eventid == row[1] and category == row[2] and location == row[4] and date == row[5]):
            new_rows.append((row[0],row[1],row[2],row[3],row[4],row[5],'old'))
        else:
            new_rows.append((row[0],row[1],row[2],row[3],row[4],row[5],'new'))
    else:
        new_rows.append((row[0],row[1],row[2],row[3],row[4],row[5],'new'))
 return new_rows

def connect_db():
  print"making db call"
  con = sqlite3.connect('/Users/skillachie/Documents/BinaryNLP//new/deploy/events_id.db')
  #con = sqlite3.connect('/home/dvc2106/newsblaster_project/binaryNLP/new/deploy/events_id.db')
  cur = con.cursor()    
  cur.execute("SELECT Id, EventId, Category,Path,Location,Date FROM Clustering_Events where Id in (1226354,1226251,1226252,1226288,1226271,1226318,1226366,1226358,1225977,1226301,1226302,1226356,1226355,1226357,1226340,1226341,1225349,1225350,1226273,1226274,1226257,1226258,1226316,1226317,1226300,1225978,1226283,1226284,1226297,1226323,1226335,1226289,1226290,1226291,1226292,1226307,1226308,1225849,1226343,1225348,1226281,1226282,1226266,1226267,1226268,1226332,1226319,1226320,1226378,1226344,1226254,1225381,1226325,1226348,1226349,1226321,1226322,1226296,1226364,1226365,1226337,1226336,1226338,1226339,1226372,1226286,1226287,1226255,1226304,1226370,1225979,1225980,1226277,1226305,1226350,1225382,1226249,1226270,1226294,1226295,1226293,1226333,1225346,1226261,1226262,1226264,1226263,1226265,1226259,1226260,1226299,1226313,1226347,1226369,1226250,1226371,1226361,1226279,1226280,1226256,1226362,1226363,1226346,1226276,1226375,1226374,1226376,1226377,1226368,1226275,1225380,1226345,1226312,1226353,1226359,1226360,1226324,1226329,1226351,1226352,1226327,1226328,1226122,1226306,1226342,1226298,1226285,1226334,1226326,1225383,1226367,1226269,1226121,1226303,1226278,1226373,1226272,1226309,1226310,1226311,1226330,1226331,1225347,1226253,1226314,1226315,3275,3265,3261,3262,3264,3268,3370,3276,3266,3291,3267,609929,609953,610001,610019,610024,609934,609935,609936,609952,609959,594299,594331,594337,594347,594382,594404,594437,594311,594380,594390,594406,601474,601529,601532,601431,601462,601483,601487,601510,601552,601555,601564,601484,601495,601523,38820,38852,38961,39083,39120,13395,13413,13656,13699,97333,97339,97608,97622,97348,98004,136081,136101,136123,136300,90817,90852,90854,49988,50030,50179,50311,126642,126699,127023,84187,84283,84506,41794,41841,41854,42116,42351,42357,42380,851772,869257,869945,870143,870692,661622,661850,661626,661714,661935,662403,662475,662502,661591,661631,662280,662488,662787,657425,657865,657376,657579,657916,656737,656777,657228,657921,820224,820395,820708,820746,820067,820133,820142,820225,820229,820336,820430,820472,820628,820753,820784,820880,820882,820883,820903,821171,773612,773668,774567,773556,773686,773748,773833,773858,773860,773690,774672,762734,762977,763152,763424,762764,762785,762937,762962,763184,763557,762765,645247,645319,645374,645418,645688,645832,646169,645208,645267,645450,645548,645693,646009,646111,646231,873791,873845,874111,874538,873773,873846,874147,874153,874267,874462,874771,873782,873857,873886,874225,673728,673752,674102,673760,673789,674131,674355,674393,673761,673771,674415,674487,1185723,1185725,1185726,1185727,1185729,1185933,1185959,1186021,1186032,1213024,1213029,1213039,1213045,1213205,1213213,1213223,1188198,1188270,1188314,1188315,1188279,1188293,1188308,1188331,1188207,1188213,1188214,1188221,1215264,1215284,1215309,1219828,1219834,1219837,1219927,1219968,1219974,1219981,1219994,1220013,1220033,1220062,1217660,1217668,1217704,1220876,1220877,1220878,1220881,1220882,1220883,1220885,1220891,1189840,1189842,1189845,1189846,1189853,1189894,1189895,1189943,1189975,1219888,1219896,1219900,1220431,1220529,1220541,1220559,1220589,1220596,1220601,1221455,1221456,1222030,1222033,1222056,1193522,1193529,1193372,1193373,1193374) ORDER BY Date ASC, Category ASC, EventId ASC")
  rows = cur.fetchall()
  new_rows = is_new_event(rows)
  #pprint(new_rows)
  return new_rows

def insert_eval(eventid,category,location,date,selection,event_label):
    #con = sqlite3.connect('/home/dvc2106/newsblaster_project/binaryNLP/web/events.db')
    with con:
        cur = con.cursor() 
        cur.execute("INSERT INTO Clustering_Events_Evaluation (EventId,Category,Location,Date,Event_Type,Event_label) VALUES(?,?,?,?,?,?)", (eventid,category,location,date,selection,event_label))


# create the application object
app = Flask(__name__)


@app.route("/clusterEval")
def updateClusterEval():
	 eventid = request.args.get('event_id')
	 category = request.args.get('category')
	 location = request.args.get('location')
	 date = request.args.get('date')
	 selection = request.args.get('selection')
	 event_label = request.args.get('event_label')
	 insert_eval(eventid,category,location,date,selection,event_label)
	 return jsonify(result="successfully saved evaluation")


@app.route("/file")
def readFile():
	 file_name = request.args.get('file_name')
	 full_path = file_name
	 fh = open(full_path, "rU")
	 lines = fh.readlines()
	 fh.close()
	 return jsonify(file_name=file_name,
	 				text = lines)

@app.route('/clustereval')
def welcome():
	items = connect_db()
	return render_template('clustereval.html',items=items)  # render a template

# start the server with the 'run()' method
if __name__ == '__main__':
  app.run(host='0.0.0.0', port=8080)
